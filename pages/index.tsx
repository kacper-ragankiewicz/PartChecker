import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import OutsideAlerter from '@/components/Outside'
import { useRouter } from "next/router"

const inter = Inter({ subsets: ['latin'] })

import loop from "../styles/assets/loop.png";
import mark from "../styles/assets/mark.png";
import error from "../styles/assets/error.png";
import processor from "../styles/assets/processor.jpeg";
import processed from "../styles/assets/processed.png";
import { arrayBuffer } from 'stream/consumers';

interface elementType {
  id: number;
  name: string;
  description: string;
  type: number;
  standard:  number;
  price: string;
}

interface typesType {
  [key: string]: string;
}

type MyElementArray = elementType[]

export default function Home() {
  const router = useRouter()

  const [status, setStatus] = useState(false)
  const [search, setSearch] = useState("")
  const [searchArray, setSearchArray] = useState<elementType[]>([])
  const [elementArray, setElementArray] = useState<elementType[]>([])

  const types: typesType = {
    '2': 'Processor'
  }

  const fetchData = async () => {
    try {
      const response = await fetch(`/api/search?q=${search}`);
      if (response.ok) {
        const data = await response.json();
        setSearchArray(data);
      } else {
        console.error('Failed to fetch search results');
      }
    } catch (error) {
      console.error('An error occurred', error);
    }
  };
  const removeElement = (id: number) => {
      let array = elementArray.filter(item => item.id !== id)

      setElementArray(array)
      // filterSearchArray()
    }

  // const filterSearchArray = () => {
  //   const serchFiltered = searchArray.filter(item => !elementArray.some(element => element['id'] === item['id']));
  //   return setSearchArray(serchFiltered)
  // }

  const clearSearch = () => {
    return setSearch("")
  }


  const addElement = (id: number) => {
      setSearch("")
      let array: elementType[] = [...elementArray]
      let search: elementType[] = [...searchArray]
      let index  = search.findIndex(item => id === item.id);

      array.push(search[index])
      setElementArray(array)
  }

  const handleInputChange = (event: any) => {
    setSearch(event.target.value);
  }

  const handleSubmit = (e: any) => {
    e.preventDefault();
    fetchData();
  };



  const ElementsGenerator = (props: elementType) => {
    let type = props.type.toString()

    return(
      <li className={styles.elementsItem}>
        <div className={styles.elementHeader}>
          <h2 className={styles.elementName}>{types[type]}</h2>
          <div onClick={() => removeElement(props.id)} className={styles.removeElementButton}>
          <Image
            src={error}
            width={48}
            height={48}
            alt='error IMG'
            priority
            className={styles.errorImg}
            />
          </div>
        </div>
        <h3 className={styles.elementDetail}>{props.name}</h3>
        {/* <div className={styles.elementImgContainer}>
          <Image
            src={processor}
            width={190}
            height={190}
            alt='Element IMG'
            priority
            className={styles.elementImg}
          />
        </div> */}
        <div className={styles.elementMark}>
          <Image
            src={processed}
            width={48}
            height={48}
            alt='mark IMG'
            className={styles.elementMarkImg}
            priority
          />
        </div>
      </li>
    )
  }

  const SearchGenerator = (props: any) => {
    return(
      <li key={props.key} className={styles.searchItem} onClick={() => addElement(props.id)}>
        {/* <div className={styles.searchImgContainer}>
          <Image
            src={processor}
            width={190}
            height={190}
            alt='Element IMG'
            priority
            className={styles.elementImg}
          />
        </div> */}
        <h3>{props.name}</h3>
        <p>{props.detail}</p>
      </li>
    )
  }

  const elementList = elementArray.map((item, index)=> <ElementsGenerator key={index} {...item}/>)
  const searchList = searchArray.map((item, index) => <SearchGenerator key={index} {...item}/>)

  console.log(elementArray)

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <OutsideAlerter
          className={styles.outsideAlert}
          change={() => clearSearch()}
        >
        <nav className={styles.navbarContainer}>

          <h1 className={styles.logoContainer}>Dopasuj<span>CZĘŚĆ</span></h1>
          <div className={styles.loopImgContainer}>
            <Image
              src={loop}
              width={48}
              height={48}
              alt='Loop ICON'
              className={styles.loopIMG}
            />
          </div>
          <form onSubmit={handleSubmit} className={styles.form}>
              <input type='text' id="type" onChange={handleInputChange} value={search} name='type' placeholder='SZUKAJ CZĘŚCI...' className={styles.searchBar}/>
              { search !== ""
              ?
                <div className={styles.searchBox}>
                  <ul className={styles.searchList}>
                    {searchList}
                  </ul>
                </div>
              :
                " "
              }
              <button className={styles.submitButton} type="submit">Submit</button>
          </form>
        </nav>
        </OutsideAlerter>
        <div className={styles.wrapper}>
          <div className={styles.wrapperHeader}>
            <h1 className={styles.header}>TWOJE CZĘŚCI KOMPUTEROWE:</h1>
            { status ? 
                <div className={styles.statusContainer}>
                  <h1 className={styles.status}>STATUS:</h1>
                  { status
                  ?
                    <div className={styles.correct}>
                      <Image
                        src={mark}
                        width={48}
                        height={48}
                        alt='good IMG'
                        priority
                        className={styles.correctImg}
                      />
                    </div>
                  :
                    <div className={styles.error}>
                      <Image
                        src={error}
                        width={48}
                        height={48}
                        alt='error IMG'
                        priority
                        className={styles.errorImg}
                      />
                    </div>
                  }
                </div>
                : ''
            }
            </div>
          <div className={styles.elemetsListWrapper}>
            <ul className={styles.elementsList}>
              {elementList}
            </ul>
          </div>
        </div>
      </main>
    </>
  )
}
